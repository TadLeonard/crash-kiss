#!/usr/bin/env python
"""
Command line entry point to `crash kiss` face smashing functions.
"""
from __future__ import print_function
import argparse
import mahotas
from crash_kiss import edge, mutate, util


parser = argparse.ArgumentParser(
    description="Crash images into things",
    formatter_class=argparse.ArgumentDefaultsHelpFormatter)
parser.add_argument("targets", nargs="+")
parser.add_argument("-s", "--smash", choices=("center", "wall"))
parser.add_argument("-d", "--direction", default="lr",
                    help="'ud' up-to-down and so on",
                    choices=("lr", "rl", "ud", "du"))
parser.add_argument("-a", "--combine-axis",
                    choices=("vertical", "horizontal"), default="horizontal")
parser.add_argument("-o", "--outfile", default=None)
procargs = parser.add_argument_group("processing")
_conf = edge.config()  # defaults
procargs.add_argument("--bg-change-tolerance", type=int,
                      help="used to reduce the foreground vs. background"
                           "comparison in edge detection",
                      default=_conf["bg_change_tolerance"])
procargs.add_argument("--threshold",
                      help="min difference between background and foreground"
                           "to determine an edge",
                      default=_conf["threshold"], type=int)
procargs.add_argument("--neg-sample-size", type=int,
                      help="num pixels of edges space to use in the "
                           "sampling of the background color",
                      default=_conf["neg_sample_size"])
procargs.add_argument("--relative-sides",
                      type=lambda x: x.split(","),
                      help="side of the subject (after rotation) to act on",
                      default=_conf["relative_sides"])
debug = parser.add_argument_group("debugging")
debug.add_argument("-c", "--charout", action="store_true")
debug.add_argument("--char-scale", type=float, default=1.0)
debug.add_argument("-e", "--reveal-edges", action="store_true")
debug.add_argument("--reveal-width", type=int, default=1)


def run():
    # Parse args, combine images passed to ckiss into a single image
    args = parser.parse_args()
    imgs = map(mahotas.imread, args.targets)
    if not imgs:
        parser.error("Must pass in one or more paths to images")
    elif len(imgs) == 1:
        img = imgs[0]
    elif len(imgs) > 1:
        img = mutate.combine_images(imgs, axis=args.combine_axis)

    # change the orientation of the image if a non-left direction is specified
    if args.direction == "lr":
        working_img = util.orient_left_to_right(img)
    elif args.direction == "rl":
        working_img = util.orient_right_to_left(img)
    elif args.direction == "ud":
        working_img = util.orient_up_to_down(img)
    elif args.direction == "du":
        working_img = util.orient_down_to_up(img)


    # This is where we should process each image for edge detection...
    config = edge.config(threshold=args.threshold,
                         bg_change_tolerance=args.bg_change_tolerance,
                         neg_sample_size=args.neg_sample_size,
                         relative_sides=args.relative_sides)
    subject = edge.Subject(img=working_img, config=config)

    # After this point we're always working with one big, combined image
    if args.smash:
        if args.smash == "center":
            raise NotImplementedError("Can't center smash yet")
        elif args.smash == "wall":
            mutate.wall_smash_image(subject)

    # Various things to do with the result of our image mutations
    if args.charout:
        char_img = util.textify_edges(
            subject, char=u"@", scale=args.char_scale)
        print("".join(char_img))
    if args.reveal_edges:
        mutate.reveal_edges(subject, args.reveal_width)
    if args.outfile:
        mahotas.imsave(args.outfile, img)


if __name__ == "__main__":
    run()

