#!/usr/bin/env python
"""
Command line entry point to `crash kiss` face smashing functions.
"""
from __future__ import print_function
import argparse
import mahotas
from crash_kiss import edge, mutate, util


parser = argparse.ArgumentParser(description="Crash images into things")
parser.add_argument("targets", nargs="+")
parser.add_argument("--threshold",
                    default=edge.DEFAULT_THRESH, type=int)
parser.add_argument("--smash", type=str,
                    choices=("left", "right"), default=None)
parser.add_argument("--output-type", type=str,
                    choices=("char", "gif", "img"), default="img")
parser.add_argument("--char-scale", type=float, default=1.0)
parser.add_argument("-d", "--direction", default="left",
                    choices=("left", "right", "up", "down"))
parser.add_argument("-v", "--smash_up", action="store_true",
                    default=False)
parser.add_argument("-a", "--combine-axis",
                    choices=("vertical", "horizontal"), default="horizontal")
parser.add_argument("-o", "--outfile", default=None)
parser.add_argument("-c", "--charout", action="store_true")
parser.add_argument("-e", "--reveal-edges", action="store_true")


def run():
	# Parse args, combine images passed to ckiss into a single image
    args = parser.parse_args()
    imgs = map(mahotas.imread, args.targets)
    if not imgs:
        parser.error("Must pass in one or more paths to images")
    if len(imgs) == 1:
        img = imgs[0]
    elif len(imgs) > 1:
        img = combine_images(imgs, axis=args.combine_axis)

    # This is where we should process each image for edge detection...
    edges = edge.iter_subject_edges(img, threshold=args.threshold)

    # After this point we're always working with one big, combined image
    if args.smash:
        if args.smash == "left":
            raise NotImplementedError("Can't smash left yet")
        elif args.smash == "right":
            mutations.wall_smash_image(edges, img)

    # Various things to do with the result of our image mutations
    if args.charout:
        char_img = util.textify_edges(edges, char=u"@", scale=args.char_scale)
        print("".join(char_img))
    if args.reveal_edges:
        mutate.reveal_edges(edges, img, inplace=True)
    if args.outfile:
        mahotas.imsave(args.outfile, img)


if __name__ == "__main__":
    run()

